#-------------------------------------------------------------------------------
# 8dcc's rTorrent configuration. See: https://github.com/8dcc/linux-dotfiles
# Move to '~/.rtorrent.rc'.
#
# For the official configuration template, see:
# https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
#
# TODO:
#   - Watch torrents for loading/starting them. This is not currently added
#     since I don't use it.
#-------------------------------------------------------------------------------

# Instance layout (base paths).
# The 'cfg.watch' variable is currently not being used.
method.insert = cfg.basedir,  private|const|string, (cat, (system.env, HOME), "/.rtorrent/")
method.insert = cfg.download, private|const|string, (cat, (system.env, HOME), "/Downloads/01-Torrents/")
method.insert = cfg.logs,     private|const|string, (cat, (cfg.basedir), "log/")
method.insert = cfg.logfile,  private|const|string, (cat, (cfg.logs), "rtorrent-", (system.time), ".log")
method.insert = cfg.session,  private|const|string, (cat, (cfg.basedir), ".session/")
method.insert = cfg.watch,    private|const|string, (cat, (cfg.basedir), "watch/")

# Create instance directories
execute.throw = sh, -c, (cat,\
    "mkdir -p \"", (cfg.download), "\" ",\
    "\"", (cfg.logs),    "\" ",\
    "\"", (cfg.session), "\" ",\
    "\"", (cfg.watch),   "/load\" ",\
    "\"", (cfg.watch),   "/start\" ")

# Random listening port for incoming peer traffic
network.port_range.set = 10000-50000
network.port_random.set = yes

# Tracker-less torrent and UDP tracker support (conservative settings for "private" trackers)
dht.mode.set = disable
protocol.pex.set = no
trackers.use_udp.set = no

# Peer settings
throttle.max_uploads.set = 100
throttle.max_uploads.global.set = 250
throttle.max_downloads.set = 100
throttle.max_downloads.global.set = 250
throttle.min_peers.normal.set = 20
throttle.max_peers.normal.set = 60
throttle.min_peers.seed.set = 30
throttle.max_peers.seed.set = 80
trackers.numwant.set = 80

# Encryption:
#   - require: Require encryption, and reject peers who don't support it.
#   - allow_incoming: Allow incoming encrypted connections from other peers.
#   - try_outgoing: Attempt to set up encryption when initiating a connection.
#   - enable_retry: If a peer is rejected for not supporting the encryption we
#     need, retry the handshake.
protocol.encryption.set = require,allow_incoming,try_outgoing,enable_retry

# Limits for file handle resources, this is optimized for an 'ulimit' of 1024 (a
# common default). You MUST leave a ceiling of handles reserved for rTorrent's
# internal needs!
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300

# Memory resource usage.
# NOTE: Change depending on the machine.
pieces.memory.max.set = 1800M
network.xmlrpc.size_limit.set = 4M

# Basic operational settings (no need to change these).
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.download))
log.execute = (cat, (cfg.logs), "execute.log")
execute.nothrow = sh, -c, (cat, "echo >",\
    (session.path), "rtorrent.pid", " ", (system.pid))

# Other operational settings.
encoding.add = UTF-8
system.umask.set = 0027
system.cwd.set = (directory.default)
network.http.dns_cache_timeout.set = 25

# Schedule a task for monitoring disk space, making sure we have enough.
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))

# Logging:
#   - Levels = critical error warn notice info debug
#   - Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat, "Logging to ", (cfg.logfile))
log.open_file = "log", (cfg.logfile)
log.add_output = "info", "log"
log.add_output = "notice", "log"
log.add_output = "warn", "log"
log.add_output = "error", "log"
log.add_output = "critical", "log"