#!/usr/bin/env bash
# shellcheck disable=SC1091

#===============================================================================
# Move this file to '~/.bashrc'.
# See https://github.com/8dcc/linux-dotfiles
#===============================================================================

# If not running interactively, don't do anything
[ -z "$PS1" ] && return
[[ $- == *i* ]] || return

#-------------------------------------------------------------------------------
# Misc

# After each (non-builtin) command, Bash checks the window size, updating the
# number of rows and columns.
shopt -s checkwinsize

# Enable better color highlighting for 'ls'.
if [ -r "$HOME/.dircolors" ]; then
    eval "$(dircolors -b "$HOME/.dircolors")"
else
    eval "$(dircolors -b)"
fi

#-------------------------------------------------------------------------------
# History

# Ignore duplicate commands, as well as blank lines. Equivalent to Emacs' shell
# `eshell-hist-ignoredups' variable.
HISTCONTROL=ignoreboth

# History size on memory, and on disk.
HISTSIZE=1000
HISTFILESIZE=2000

# Append to the history, rather than overwriting it each time.
shopt -s histappend

#-------------------------------------------------------------------------------
# Prompt

PS1='\[\033[0;32m\]\u \[\033[1;34m\]\w\[\033[0m\] $(_get_git_branch)\$ '
PS2='> '

# Git stuff
if [ -f "$HOME/.my-scripts/startup/git-prompt.sh" ]; then
    . "$HOME/.my-scripts/startup/git-prompt.sh"
    _get_git_branch() {
        local branch_color
        local branch_name
        local reset_color

        branch_name="$(__git_ps1 "(%s)")"
        if [ -z "$branch_name" ]; then
            return 1
        fi

        reset_color='\033[0m'
        if [[ $(git status -s 2> /dev/null) ]]; then
            branch_color='\033[0;33m'
        elif [[ $(git diff --stat "$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2> /dev/null)" 2> /dev/null) ]]; then
            branch_color='\033[0;35m'
        else
            branch_color='\033[0;32m'
        fi

        echo -en "${branch_color}${branch_name}${reset_color} "
    }
else
    _get_git_branch() { echo -n ""; }
fi

# Guix stuff
if [ -n "$GUIX_ENVIRONMENT" ]; then
    if [[ $PS1 =~ (.*)"\\$" ]]; then
        PS1="${BASH_REMATCH[1]} [env]\\\$ "
    fi
fi

#-------------------------------------------------------------------------------
# Bash completion

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Bash tries to correct spelling errors during directory completion.
bind 'set completion-ignore-case on'

#-------------------------------------------------------------------------------
# Aliases

# For other bash scripts, see ../../scripts/util/
#
# Instead of using an alias for emerge, see EMERGE_DEFAULT_OPTS:
#   https://wiki.gentoo.org/wiki/EMERGE_DEFAULT_OPTS

# Usage: alias_safe ALIAS CMD [ARGS]
alias_safe() {
    # shellcheck disable=SC2139
    [[ $(command -v "$2") ]] && alias "$1"="$2 $3"
}

# Usage: alias_default_args CMD DEFAULT_ARGS
alias_default_args() {
    alias_safe "$1" "$1" "${*:2}"
}

# Usage: alias_env_vars CMD ENV_VARS
alias_env_vars() {
    # shellcheck disable=SC2139
    [[ $(command -v "$1") ]] && alias "$1"="${*:2} $1"
}

# Add color to common commands.
alias_default_args ls    '--color=auto -l --sort=version --group-directories-first --human-readable'
alias_default_args diff  '--color=auto -u'
alias_default_args grep  '--color=auto'
alias_default_args fgrep '--color=auto'
alias_default_args egrep '--color=auto'
alias_default_args ip    '--color=auto'

# Default arguments.
alias_default_args tree     '-Aaq'
alias_default_args less     '--chop-long-lines --ignore-case'
alias_default_args snc      '--print-interfaces --print-peer-info --print-progress'
alias_default_args valgrind '--leak-check=full --track-origins=yes'
alias_default_args yt-dlp   '--embed-metadata --embed-subs --merge-output-format mkv'

# Environment variables.
alias_env_vars ghidra '_JAVA_AWT_WM_NONREPARENTING=1'

# New aliases.
alias_safe disassemble 'objdump' '--disassembler-color=terminal -M intel -d'
alias_safe vi 'nvim'
alias_safe bytes2asm 'rz-asm' '-s intel -D -C'

# New commands/functions.
# TODO: Some simple "util" scripts could be moved here.
archive-ss() {
    local IMAGE_DIR="$HOME/02-Media/01-Images/01-Screenshots"  # Can't use '~'
    mv ~/ss-*.png "$IMAGE_DIR"
}

# Load an external aliases file, if found.
if [ -f "$HOME/.bash_aliases" ]; then
    . "$HOME/.bash_aliases"
fi

# Unset internal aliasing functions.
unset -f alias_safe
unset -f alias_default_args
unset -f alias_env_vars

#-------------------------------------------------------------------------------
# New functions/commands

_assert_cmd() {
    if [ "$(command -v "$1")" ]; then
        return 0
    else
        echo "The '$1' command is not installed." 1>&2
        return 1
    fi
}

,bin-diff() {
    local HEXDUMP='xxd'
    local DIFF='diff'
    (_assert_cmd "$HEXDUMP" && _assert_cmd "$DIFF") || return 1
    if [ $# -ne 2 ]; then
        echo "Usage: ${FUNCNAME[0]} BIN1 BIN2" 1>&2
        return 1
    fi
    # For more information on the <(...) syntax, see:
    # https://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html
    $DIFF <($HEXDUMP "$1") <($HEXDUMP "$2")
}

,emacs-tor() {
    local TORSOCKS=torsocks
    local EMACS=emacs
    (_assert_cmd "$TORSOCKS" && _assert_cmd "$EMACS") || return 1
    $TORSOCKS $EMACS "$@"
}

,find-similar() {
    _assert_cmd 'find' || return 1
    if [ $# -lt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH NAME [OPTION]..." 1>&2
        return 1
    fi
    find "$1" -iname "*${2}*" "${@:3}"
}

,git-log-short() {
    _assert_cmd 'git' || return 1
    # Usage:
    #
    #     git-log-short [OPTION]... [REVISION_RANGE] [[--] PATH...]
    #
    # This command does something pretty similar to:
    #
    #     git log --pretty=oneline
    #
    # Desired format:
    #
    #     <commit> <date> <author> <subject>
    #
    # Example:
    #
    #     * 6bd6ce1 2024-06-08 8dcc Add yt-dlp alias
    #     * 6c89169 2024-05-28 8dcc Add history to gdbinit, add xxd
    #     *   4b6e4c7 2024-05-22 8dcc Merge branch 'main'
    #     |\
    #     * | db9eab8 2024-05-22 8dcc Fix remote change detection in PS1 with [...]
    #     * | 7bf74a4 2024-05-22 8dcc s/opcode bytes/instruction bytes
    #     | * e0ab3b0 2024-05-21 8dcc Add USE flags for LaTeX
    #     |/
    #     * 0f556d3 2024-04-30 8dcc Add Iosevka 8dcc font
    #
    # See:
    # - https://git-scm.com/docs/git-log#_pretty_formats
    # - https://stackoverflow.com/q/1441010/11715554
    local FLAGS="--graph --date-order --date=short"
    local FMT="%C(yellow)%h %C(cyan)%cd %C(magenta)%aN%C(auto)%d %Creset%s"
    git log $FLAGS --pretty="$FMT" "$@"
}

,git-log-long() {
    _assert_cmd 'git' || return 1
    # Usage:
    #
    #     git-log-long [OPTION]... [REVISION_RANGE] [[--] PATH...]
    #
    # Shows commit date, author date, and PGP signature information.
    git log --pretty=fuller --show-signature "$@"
}

,mapc() {
    if [ $# -lt 1 ]; then
        echo "Usage: ${FUNCNAME[0]} CMD ARG..." 1>&2
        return 1
    fi
    # Map each argument to the specified command. For example:
    #
    #     mapc shuf a.txt b.txt c.txt
    #
    # The previous code will call shuf(1) with the files named 'a.txt', 'b.txt' and
    # 'c.txt' as arguments, in order. In this example, note how the lines of 'a.txt'
    # will NOT be shuffled with the lines of the other two files (since they are
    # part of different calls).
    #
    # Note how we don't quote '$1'. This way, the user can provide a command with
    # arguments when calling 'mapc'. For example, in the following call:
    #
    #     mapc "shuf -z" a.txt b.txt c.txt
    #
    # Since the first argument of 'mapc' is quoted, both words ('shuf' and '-z')
    # will be in '$1'. These words will be "unpacked" when calling the command
    # inside the loop, since we are not quoting '$1'.
    for element in "${@:2}"; do
        $1 "$element"
    done
}

,mpv-sub() {
    _assert_cmd 'mpv' || return 1
    if [ $# -ne 2 ]; then
        echo "Usage: ${FUNCNAME[0]} SUBFILE FILE" 1>&2
        return 1
    fi
    mpv --sub-file="$1" "$2"
}

,procs() {
    _assert_cmd 'ps' || return 1
    # These flags specify:
    #   - List all processes ('-e').
    #   - Show them with a tree format ('--forest').
    #   - Use the specified format for each process:
    #     PID TIME %CPU %MEM USER GROUP COMMAND
    #   - Without any terminal width restriction ('-ww').
    ps -e --forest -o 'pid,cputime,%cpu,%mem,user,group,args' -ww
}

,src2ps() {
    _assert_cmd 'a2ps' || return 1
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} INPUT [OUTPUT]" 1>&2
        exit 1
    fi
    # Either second argument, or '-' (stdout). See:
    # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
    output=${2:--}
    input=$1
    local A2PSFLAGS="--portrait --columns=1 --no-header"
    echo "Converting '$input' to '$output' with flags '$A2PSFLAGS'." 1>&2
    a2ps $A2PSFLAGS --output="$output" "$input"
}

#-------------------------------------------------------------------------------
# Custom exports

export PYTHONDONTWRITEBYTECODE=1  # Remove pycache stuff

#-------------------------------------------------------------------------------
# Welcome messages, etc.

echo -e "Using bash as '${USER}', in '$(tty)' of '${HOSTNAME}'. Welcome.\n"
