From e1c7b3e901d116a5dbfefaa0e357bbc911adf6b0 Mon Sep 17 00:00:00 2001
From: 8dcc <8dcc.git@gmail.com>
Date: Tue, 15 Oct 2024 00:56:50 +0200
Subject: [PATCH] Allow user to render only ascii_printable characters

This patch is similar to st-nowide-20241013-0.8.2.diff, but instead of filtering
by character width, it checks if the character is in the `ascii_printable'
array, already defined in <config.def.h>. See the other patch for more details.

This patch is intended for ST 0.8.2, but it should be easy to port it to newer
versions.
---
 config.def.h |  9 ++++++++-
 st.c         | 33 ++++++++++++++++++++++++++++++++-
 st.h         |  3 +++
 3 files changed, 43 insertions(+), 2 deletions(-)

diff --git a/config.def.h b/config.def.h
index 0e01717..fda003f 100644
--- a/config.def.h
+++ b/config.def.h
@@ -178,6 +178,7 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+	{ TERMMOD,              XK_A,          toggleasciionly, {.i =  0} },
 };
 
 /*
@@ -456,7 +457,13 @@ static uint selmasks[] = {
  * Printable characters in ASCII, used to estimate the advance width
  * of single wide characters.
  */
-static char ascii_printable[] =
+char ascii_printable[] =
 	" !\"#$%&'()*+,-./0123456789:;<=>?"
 	"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
 	"`abcdefghijklmnopqrstuvwxyz{|}~";
+
+/*
+ * should we render non-ascii characters by default? Can be toggled with the
+ * `toggleasciionly' shortcut above.
+ */
+int asciionly = 0;
diff --git a/st.c b/st.c
index b8e6077..7a0e200 100644
--- a/st.c
+++ b/st.c
@@ -52,6 +52,7 @@ enum term_mode {
 	MODE_PRINT       = 1 << 5,
 	MODE_UTF8        = 1 << 6,
 	MODE_SIXEL       = 1 << 7,
+	MODE_ASCIIONLY   = 1 << 8,
 };
 
 enum cursor_movement {
@@ -152,6 +153,9 @@ typedef struct {
 	int narg;              /* nb of args */
 } STREscape;
 
+
+static inline int isasciiprintable(Rune u);
+
 static void execsh(char *, char **);
 static void stty(char **);
 static void sigchld(int);
@@ -1029,6 +1033,8 @@ treset(void)
 	term.top = 0;
 	term.bot = term.row - 1;
 	term.mode = MODE_WRAP|MODE_UTF8;
+	if (!asciionly)
+		term.mode |= MODE_ASCIIONLY;
 	memset(term.trantbl, CS_USA, sizeof(term.trantbl));
 	term.charset = 0;
 
@@ -1980,6 +1986,12 @@ tprinter(char *s, size_t len)
 	}
 }
 
+void
+toggleasciionly(const Arg *arg)
+{
+	term.mode ^= MODE_ASCIIONLY;
+}
+
 void
 toggleprinter(const Arg *arg)
 {
@@ -2293,6 +2305,18 @@ eschandle(uchar ascii)
 	return 1;
 }
 
+int
+isasciiprintable(Rune u)
+{
+	char* c;
+
+	for (c = ascii_printable; *c != '\0'; c++)
+		if (u == *c)
+			return 1;
+
+	return 0;
+}
+
 void
 tputc(Rune u)
 {
@@ -2426,7 +2450,14 @@ check_control_code:
 
 	tsetchar(u, &term.c.attr, term.c.x, term.c.y);
 
-	if (width == 2) {
+
+	if (IS_SET(MODE_ASCIIONLY))  {
+		if (!isasciiprintable(u)) {
+			gp[0].u = '?';
+			gp[0].mode |= ATTR_FAINT;
+			width = 1;
+		}
+	} else if (width == 2) {
 		gp->mode |= ATTR_WIDE;
 		if (term.c.x+1 < term.col) {
 			gp[1].u = '\0';
diff --git a/st.h b/st.h
index 38c61c4..b58c869 100644
--- a/st.h
+++ b/st.h
@@ -83,6 +83,7 @@ void draw(void);
 void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
+void toggleasciionly(const Arg *);
 void toggleprinter(const Arg *);
 
 int tattrset(int);
@@ -120,3 +121,5 @@ extern char *termname;
 extern unsigned int tabspaces;
 extern unsigned int defaultfg;
 extern unsigned int defaultbg;
+extern char ascii_printable[];
+extern int asciionly;
-- 
2.46.2

