#!/usr/bin/env bash
set -e

PATCH="patch"
PATCHFLAGS=()
DIFF="diff"
DIFFFLAGS=(-u)
EDITOR="nvim"
EDITORFLAGS="-O"

if [ $# -ne 2 ]; then
    echo "Usage: $(basename "$0") TARGET PATCH" 1>&2
    exit 1
fi

assert_cmd() {
    if [ ! "$(command -v "$1")" ]; then
        echo "$(basename "$0"): The '$1' command is not installed." 1>&2
        exit 1
    fi
}

assert_file() {
    if [ ! -f "$1" ]; then
        echo "$(basename "$0"): File '$1' does not exist." 1>&2
        exit 1
    fi
}

target="$1"
patchfile="$2"

assert_cmd "$PATCH"
assert_cmd "$EDITOR"

assert_file "$target"
assert_file "$patchfile"

# Try to patch, but don't stop the program if there are errors.
set +e
$PATCH "${PATCHFLAGS[@]}" "$target" < "$patchfile"
exit_code=$?
set -e

case $exit_code in
    0)
        exit 0
        ;;

    1)
        echo "$(basename "$0"): Found merge conflicts, jumping to editor..." 1>&2
        $EDITOR $EDITORFLAGS "$target" "${target}.rej"

        echo "$(basename "$0"): Creating backup of old patch in '${patchfile}.bak'..." 1>&2
        cp "$patchfile" "${patchfile}.bak"

        set +e
        echo "$(basename "$0"): Overwriting old patch with new version..." 1>&2
        $DIFF "${DIFFFLAGS[@]}" "${target}.orig" "${target}" > "$patchfile"
        set -e

        echo "$(basename "$0"): Removing '${target}.orig' and '${target}.rej'..." 1>&2
        rm "${target}.orig" "${target}.rej"

        exit 0
        ;;

    2)
        echo "$(basename "$0"): Aborting on serious error." 1>&2
        exit 1
        ;;
esac
