#!/usr/bin/env bash
#
# Copyright 2025 8dcc
#
# This file is part of 8dcc's Linux dotfiles.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.
set -e

# Print one of every N pages. Used for increasing or decreasing the page number.
PAGE_STEP=2

#-------------------------------------------------------------------------------

if [ $# -lt 3 ]; then
    echo "Usage: $(basename "$0") PAGE-START PAGE-END FILE [OPTION]..." 1>&2
    exit 1
fi

if [ ! "$(command -v 'lpr')" ]; then
    echo "The 'lpr' command is not installed." 1>&2
    exit 1
fi

#-------------------------------------------------------------------------------

page_start="$1"
page_end="$2"
file="$3"
lprflags=( "${@:4}" )

print_page() {
    echo "Sending to queue: $1"
    lpr "${lprflags[@]}" -o page-ranges="$1" "$file"
}

echo "Note: Printing in the specified order ($page_start -> $page_end) with a step of $PAGE_STEP."
if [ "$page_start" -le "$page_end" ]; then
    # TODO: We could avoid generating N separate jobs by using the
    # '-o page-set=odd' or '-o page-set=odd' options for 'lpr'. I am not sure
    # if it's possible to print in reverse order (the other loop below).
    for (( i="$page_start"; i<="$page_end"; i+="$PAGE_STEP" )); do
        print_page $i
    done
else
    for (( i="$page_start"; i>="$page_end"; i-="$PAGE_STEP" )); do
        print_page $i
    done
fi
