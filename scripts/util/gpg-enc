#!/bin/bash
set -e

PROGRAM_NAME="$(basename "$0")"
DEFAULT_OUTPUT="-"

# Set the default GPG flags, unless overwritten.
if [ -z "$GPGFLAGS" ]; then
    GPGFLAGS="--armor"
fi

#-------------------------------------------------------------------------------

if [ $# -lt 1 ] || [ $# -gt 3 ]; then
    echo "Usage:"                                    1>&2
    echo "    $PROGRAM_NAME RECIPIENT"               1>&2
    echo "    $PROGRAM_NAME RECIPIENT < FILE"        1>&2
    echo "    $PROGRAM_NAME RECIPIENT FILE [OUTPUT]" 1>&2
    exit 1
fi

#-------------------------------------------------------------------------------

inform() {
    echo -n "$PROGRAM_NAME: " 1>&2
    echo -e $1 1>&2
}

recipient=$1

if [ $# -ge 2 ]; then
    # If we got two arguments, the second one is the target file.
    file_input="$2"

    # If we got two arguments, the second one is the output file.
    if [ $# -ge 3 ]; then
        file_output="$3"
    else
        file_output="$DEFAULT_OUTPUT"
    fi
elif [ ! -t 0 ]; then
    # If the file is being piped to us (stdin is not a terminal), pass "-"
    # to gpg as input (stdin) and output (stdout).
    file_input="-"
    file_output="-"
else
    # Otherwise, open a temporal file on the default editor and use that.
    #
    # First, check if the EDITOR environment variable is set. If it is, use
    # it. Otherwise, use "nvim".
    editor=${EDITOR:-nvim}

    # Create a temporal file using mktemp(1)
    tmp_file="$(mktemp --tmpdir "gpg-enc.XXXX")"

    file_input="$tmp_file"
    file_output="$DEFAULT_OUTPUT"

    inform "Opening temporal file '$tmp_file' in the '$editor' editor..."
    $editor $tmp_file
    inform "Done editing. Encrypting to '$file_output'"
fi

gpg $GPGFLAGS --recipient "$recipient" --output "$file_output" --encrypt "$file_input"

if [ ! -z "$tmp_file" ]; then
    inform "Done encrypting. Deleting temporal file '$tmp_file'"
    rm "$tmp_file"
fi
